using System;
using System.Collections.Generic;
using System.Text;
struct R { public char[] n;}
class FCTRL2 { static void Main() { int t = int.Parse(Console.ReadLine()); Dictionary<int, char[]> dict = new Dictionary<int, char[]>(); while (t > 0) { char[] num1 = "1".ToCharArray(); int n = int.Parse(Console.ReadLine()); for (int i = 1; i <= n; i++) { if (dict.ContainsKey(i)) { num1 = dict[i]; } else { num1 = Multiply(num1, i.ToString().ToCharArray()); dict.Add(i, num1); } } Console.WriteLine(num1); t--; } } static char[] Multiply(char[] m1, char[] m2) { int l1 = m1.Length; int l2 = m2.Length; char[] fi = new char[l1 + l2 + 1]; R[] intr = new R[l2]; int ct = 0; for (int i = l2 - 1; i >= 0; i--, ct++) { int cF = 0; intr[ct].n = new Char[l1 + 1]; for (int j = l1 - 1, pt = l1; j >= 0; j--, pt--) { int O = ((int)m1[j] == 0 ? 48 : (int)m1[j]) - 48; int T = ((int)m2[i] == 0 ? 48 : (int)m2[i]) - 48; int multi = O * T + cF; if (multi > 9) { intr[ct].n[pt] = multi.ToString().Substring(1, 1).ToCharArray()[0]; cF = int.Parse(multi.ToString().Substring(0, 1)); } else { intr[ct].n[pt] = multi.ToString().Substring(0, 1).ToCharArray()[0]; cF = 0; } intr[ct].n[0] = cF.ToString().ToCharArray()[0]; } if (ct == 0) { for (int bk = l1, fz = l1 + l2; bk >= 0; bk--, fz--) { fi[fz] = intr[ct].n[bk]; } } else { cF = 0; int fr = l1 + l2 - ct; for (int backTrack = l1; backTrack >= 0; backTrack--, fr--) { int n1 = (int)intr[ct].n[backTrack] - 48; int n2 = (fi[fr] == 0 ? 48 : (int)fi[fr]) - 48; int s1 = n1 + n2 + cF; if (s1 > 9) { fi[fr] = s1.ToString().Substring(1, 1).ToCharArray()[0]; cF = int.Parse(s1.ToString().Substring(0, 1)); } else { fi[fr] = s1.ToString().Substring(0, 1).ToCharArray()[0]; cF = 0; } } fi[fr] = cF.ToString().ToCharArray()[0]; } } List<char> item = new List<char>(); bool y = false; for (int i = 0; i < fi.Length; i++) { if ((y == false) && ((int)fi[i] == 0 || (int)fi[i] == 48)) { continue; } else { y = true; item.Add(fi[i]); } } return item.ToArray(); } }
